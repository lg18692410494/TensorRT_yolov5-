cmake_minimum_required(VERSION 2.6)

project(yolov5)

add_definitions(-std=c++11)
add_definitions(-DAPI_EXPORTS)
option(CUDA_USE_STATIC_CUDA_RUNTIME OFF)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_BUILD_TYPE Debug)

find_package(CUDA REQUIRED)

if(WIN32)
enable_language(CUDA)
endif(WIN32)

include_directories(${PROJECT_SOURCE_DIR}/include)
# include and link dirs of cuda and tensorrt, you need adapt them if yours are different
# cuda
include_directories(/home/long/.local/lib/python3.8/site-packages/trtpy/trt/include/cuda)
link_directories(/home/long/.local/lib/python3.8/site-packages/trtpy/trt/lib64)
# tensorrt
include_directories(/home/long/.local/lib/python3.8/site-packages/trtpy/trt8cuda115cudnn8/include/tensorRT)
link_directories(/home/long/.local/lib/python3.8/site-packages/trtpy/trt8cuda115cudnn8/lib64)
link_directories(/home/long/.local/lib/python3.8/site-packages/trtpy/lib)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Ofast -g -Wfatal-errors -D_MWAITXINTRIN_H_INCLUDED")
#cuda_add_library(myplugins SHARED yololayer.cu)
#target_link_libraries(myplugins nvinfer cudart)

find_package(OpenCV)
include_directories(${OpenCV_INCLUDE_DIRS})

#include_directories(/home/long/.local/lib/python3.8/site-packages/trtpy/cpp-packages/opencv4.2/include)
#link_directories(/home/long/.local/lib/python3.8/site-packages/trtpy/cpp-packages/opencv4.2/lib)

cuda_add_executable(yolov5 main.cpp yolo.cpp yolo.cu)

target_link_libraries(yolov5 nvinfer nvonnxparser nvparsers nvinfer_plugin)
target_link_libraries(yolov5 cudnn cudart)
#target_link_libraries(yolov5 myplugins)
target_link_libraries(yolov5 ${OpenCV_LIBS})

if(UNIX)
add_definitions(-O2 -pthread)
endif(UNIX)


